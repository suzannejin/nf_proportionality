/*
 * -------------------------------------------------
 *  Nextflow config file for running at CRG
 * -------------------------------------------------
 * Defines bundled input files and everything required
 * to run a fast and simple test. Use as follows:
 *   nextflow run nf-core/chipseq -profile test
 */

params {
  config_profile_name = 'CRG profile'
  config_profile_description = 'Configuration to run on CRG cluster'
}

process {
    executor = 'crg'
    maxRetries = 3

    cpus = 3

    queue = { (task.attempt < 3 ? 'long-sl7' : 'mem_512@gen25' ) }
    time = { '12h' }
    memory = { (task.attempt < 3? '85.GB' * task.attempt : '496.GB') }
    // memory = { (task.attempt < 2 ? '64.GB' : 
    //             task.attempt < 3 ? '85.GB' : '496.GB') }

    // queue = { (task.attempt < 2 ? 'long-sl7' :  'mem_512@gen25'  )}

    // memory = { (task.attempt < 2 ? '64.GB' : 
    //             task.attempt < 3 ? '96.GB' :
    //             task.attempt < 4 ? '120.GB' :
    //             task.attempt < 5 ? '248.GB' : 
    //             '496.GB')}

    // time = { (task.attempt < 4 ? '36h' : '12h' ) }
            

    // // Process-specific resource requirements
    // withLabel:process_low {
    //     cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    //     memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    //     time = { check_max( 6.h * task.attempt, 'time' ) }
    // }
    // withLabel:process_medium {
    //     cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    //     memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    //     time = { check_max( 8.h * task.attempt, 'time' ) }
    // }
    // withLabel:process_high {
    //     cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    //     memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    //     time = { check_max( 24.h * task.attempt, 'time' ) }
    // }
    // withLabel:process_memory {
    //     cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    //     memory = { check_max( 48.GB * task.attempt, 'memory' ) }
    //     time = { check_max( 48.h * task.attempt, 'time' ) }
    // }
    // withLabel:process_long {
    //     time = { check_max( 48.h * task.attempt, 'time' ) }
    // }

}
